{
	"info": {
		"_postman_id": "d9767471-f8b8-4c4b-9125-036f911efdf0",
		"name": "Rescue Shelter Report Services",
		"description": "# Introduction\nWhat does your API do?\n\n# Overview\nThings that the developers should know about\n\n# Authentication\nWhat is the preferred way of using the API?\n\n# Error Codes\nWhat errors and status codes can a user expect?\n\n# Rate limit\nIs there a limit to the number of requests an user can send?",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "http://localhost/api/report/animals",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6bd278b8-8050-45a3-a3b7-6948ed7c3c44",
						"exec": [
							"var assert = require('chai').assert;",
							"",
							"pm.test('Animals request status ok', () => {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.jsonBody('ok', true);",
							"})",
							"",
							"pm.test('Animals data.pages === 1', () => {",
							"    let body = pm.response.json();",
							"    let data = body.data;",
							"",
							"    pm.response.to.have.jsonBody(\"data['pages']\", 1);",
							"",
							"    pm.expect(data).to.have.property('pages');",
							"    pm.expect(data.pages).to.equal(1);",
							"});",
							"",
							"pm.test('Animals data.pageIndex == 1', () => {",
							"    let body = pm.response.json();",
							"    let data = body.data;",
							"",
							"    pm.response.to.have.jsonBody(\"data['pageIndex']\", 1);",
							"",
							"    pm.expect(data).to.have.property('pageIndex');",
							"    pm.expect(data.pageIndex).to.equal(1);",
							"});",
							"",
							"pm.test('Animals data.documents.length === 5', () => {",
							"    let body = pm.response.json();",
							"    let data = body.data;",
							"",
							"    pm.expect(data.documents).to.be.an('array').that.lengthOf(5);",
							"});",
							"",
							"pm.test('Animals first data.documents[0].properties contains  [_id, name, description, image, endangered, sponsors]', () => {",
							"    let body = pm.response.json();",
							"    let data = body.data;",
							"",
							"    pm.expect(data.documents[0]).to.have.property('_id');",
							"    pm.expect(data.documents[0]).to.have.property('name');",
							"    pm.expect(data.documents[0]).to.have.property('description');",
							"    pm.expect(data.documents[0]).to.have.property('image');",
							"    pm.expect(data.documents[0]).to.have.property('endangered');",
							"    pm.expect(data.documents[0]).to.have.property('sponsors');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://localhost/api/report/animals",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"report",
						"animals"
					]
				},
				"description": "Gets a list of endangered animals"
			},
			"response": [
				{
					"name": "Default",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost://api/report/animals",
							"protocol": "localhost",
							"host": [
								"api"
							],
							"path": [
								"report",
								"animals"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "http://localhost/api/report/animals/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1b239146-b107-4f5c-9ed2-02bf110c8940",
						"exec": [
							"var assert = require('chai').assert;",
							"",
							"pm.test('Animal data request status ok', () => {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.jsonBody('ok', true);",
							"})",
							"",
							"",
							"pm.test('Animal data for image', () => {",
							"    let body = pm.response.json();",
							"    let data = body.data;",
							"",
							"    pm.expect(data.image.content).to.equal('github alternate');",
							"    pm.expect(data.image.contenttype).to.equal('icon');",
							"});",
							"",
							"",
							"pm.test('Animal data for dates', () => {",
							"    let body = pm.response.json();",
							"    let data = body.data;",
							"",
							"    pm.expect(data.dates.created).to.be.a('Date');",
							"    pm.expect(data.dates.modified).to.be.a('Date');",
							"});",
							"",
							"pm.test('Animal data population', () => {",
							"    let body = pm.response.json();",
							"    let data = body.data;",
							"",
							"    pm.expect(data.data).to.be.an('array').to.have.lengthOf(100);",
							"    pm.expect(data.data[0]).to.have.property('population');",
							"    pm.expect(data.data[0]).to.have.property('created');",
							"});",
							"",
							"pm.test('Animal data properties contains  [_id, name, description, image, endangered, sponsors, category]', () => {",
							"    let body = pm.response.json();",
							"    let data = body.data;",
							"",
							"    pm.expect(data).to.have.property('_id');",
							"    pm.expect(data).to.have.property('name');",
							"    pm.expect(data).to.have.property('description');",
							"    pm.expect(data).to.have.property('image');",
							"    pm.expect(data).to.have.property('endangered');",
							"    pm.expect(data).to.have.property('category');",
							"    pm.expect(data).to.have.property('sponsors');",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://localhost/api/report/animals/5f1af2823de493d9b55f06a9",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"report",
						"animals",
						"5f1af2823de493d9b55f06a9"
					]
				},
				"description": "Gets a specific animal details"
			},
			"response": [
				{
					"name": "Default",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost://api/report/animals/:id",
							"protocol": "localhost",
							"host": [
								"api"
							],
							"path": [
								"report",
								"animals",
								":id"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "http://localhost/api/report/sponsors",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8d0eb893-82a5-4406-aa0d-0b2d60d20184",
						"exec": [
							"var assert = require('chai').assert;",
							"",
							"pm.test('Sponsors request status ok', () => {",
							"    console.log('Hey there.');",
							"    ",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.jsonBody('ok', true);",
							"})",
							"",
							"pm.test('Sponsors data.pages === 1', () => {",
							"    let body = pm.response.json();",
							"    let data = body.data;",
							"",
							"    pm.response.to.have.jsonBody(\"data['pages']\", 1);",
							"",
							"    pm.expect(data).to.have.property('pages');",
							"    pm.expect(data.pages).to.equal(1);",
							"});",
							"",
							"pm.test('Sponsors data.pageIndex == 1', () => {",
							"    let body = pm.response.json();",
							"    let data = body.data;",
							"",
							"    pm.response.to.have.jsonBody(\"data['pageIndex']\", 1);",
							"",
							"    pm.expect(data).to.have.property('pageIndex');",
							"    pm.expect(data.pageIndex).to.equal(1);",
							"});",
							"",
							"pm.test('Sponsors data.documents.length === 5', () => {",
							"    let body = pm.response.json();",
							"    let data = body.data;",
							"",
							"    pm.expect(data.documents).to.be.an('array').that.lengthOf(5);",
							"});",
							"",
							"pm.test('All sponsors data.documents[0].properties contains  [_id, useremail, firstname, lastname, photo, audit]', () => {",
							"    let body = pm.response.json();",
							"    let data = body.data;",
							"",
							"    pm.expect(data.documents[0]).to.have.property('_id');",
							"    pm.expect(data.documents[0]).to.have.property('firstname');",
							"    pm.expect(data.documents[0]).to.have.property('lastname');",
							"    pm.expect(data.documents[0]).to.have.property('useremail');",
							"    pm.expect(data.documents[0]).to.have.property('photo');",
							"    pm.expect(data.documents[0]).to.have.property('audit');",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://localhost/api/report/sponsors",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"report",
						"sponsors"
					]
				},
				"description": "Gets a list of sponsor members"
			},
			"response": [
				{
					"name": "Default",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost://api/report/sponsors",
							"protocol": "localhost",
							"host": [
								"api"
							],
							"path": [
								"report",
								"sponsors"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "http://localhost/api/report/sponsors/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f04a92bc-ad23-48dd-8f65-5c7fbff78cb8",
						"exec": [
							"var assert = require('chai').assert;",
							"",
							"pm.test('Sponsor data request status ok', () => {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.jsonBody('ok', true);",
							"})",
							"",
							"pm.test('Sponsor data for audit array', () => {",
							"    let body = pm.response.json();",
							"    let data = body.data;",
							"",
							"    pm.expect(data.audit).to.be.an('Array');",
							"    pm.expect(data.audit).to.be.have.lengthOf(1);",
							"});",
							"",
							"pm.test('Sponsor data not security', () => {",
							"    let body = pm.response.json();",
							"    let data = body.data;",
							"",
							"    pm.expect(data).to.not.have.property('security');",
							"});",
							"",
							"pm.test('Sponsor data properties contains [_id, firstname, lastname, username, useremail, photo]', () => {",
							"    let body = pm.response.json();",
							"    let data = body.data;",
							"",
							"    pm.expect(data).to.have.property('_id');",
							"    pm.expect(data).to.have.property('firstname');",
							"    pm.expect(data).to.have.property('lastname');",
							"    pm.expect(data).to.have.property('photo');",
							"    pm.expect(data).to.have.property('username');",
							"    pm.expect(data).to.have.property('useremail');",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://localhost/api/report/sponsors/5f1af2623de493d9b55f069d",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"report",
						"sponsors",
						"5f1af2623de493d9b55f069d"
					]
				},
				"description": "Gets a specific sponsor member details"
			},
			"response": [
				{
					"name": "Default",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost://api/report/sponsors/:id",
							"protocol": "localhost",
							"host": [
								"api"
							],
							"path": [
								"report",
								"sponsors",
								":id"
							],
							"variable": [
								{
									"key": "id"
								}
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": ""
				}
			]
		}
	],
	"protocolProfileBehavior": {}
}